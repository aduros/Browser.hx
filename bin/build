#!/usr/bin/env perl
#
# Forked from JSX's extern generator and adapted to Haxe
# https://github.com/jsx/JSX
#
# Copyright (c) 2012 DeNA Co., Ltd.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
# OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use 5.10.0;
use strict;
use warnings;
use File::Path qw(mkpath);
use Fatal qw(open close);
use File::Basename qw(dirname);
use Storable qw(lock_retrieve);
use Tie::IxHash;
use POSIX qw(strftime);

require "bin/idl2hx";

# the order is important!

my $root = dirname(__FILE__) . "/..";
unlink "$root/bin/.idl2hx.bin";

my $lib = "browser";

my @specs = (
    {
        module => "TypedArray",
        imports => [ ],
        idls => [
            "https://www.khronos.org/registry/typedarray/specs/latest/typedarray.idl",
        ],
    }, {
        module => "DOM",
        imports => [ "CSS" ],
        idls => [
            "http://www.w3.org/TR/dom/",
            "http://www.w3.org/TR/DOM-Level-2-Views/idl/views.idl",
            "http://www.w3.org/TR/DOM-Level-3-Events/",
            "$root/idl/events.idl",
            "http://www.w3.org/TR/touch-events/",
            "http://dev.w3.org/geo/api/spec-source-v2.html",
            "http://www.w3.org/TR/selectors-api2/",
            # "http://www.w3.org/TR/screen-orientation/",
            "http://www.w3.org/TR/orientation-event/",
        ],
    }, {
        module => "XMLHttpRequest",
        imports => [ "TypedArray", "DOM", "HTML" ],
        idls => [
            "http://www.w3.org/TR/XMLHttpRequest/",
        ],
    }, {
        module => "CSS",
        imports => [ "DOM" ],
        idls => [
            "http://dev.w3.org/csswg/cssom/",
            "http://dev.w3.org/csswg/cssom-view/",
        ],
    }, {
        module => "HTML",
        imports => [ "TypedArray", "DOM", "CSS", "IndexedDB" ],
        idls => [
            "http://www.w3.org/TR/html5/single-page.html",
            "http://www.w3.org/TR/FileAPI/",
            "http://dev.w3.org/html5/2dcontext/",
            "http://dev.w3.org/html5/webstorage/",
            "http://html5.org/specs/dom-parsing.html",
        ],
    }, {
        module => "WebSocket",
        imports => [ "TypedArray", "DOM" ],
        idls => [
            "http://dev.w3.org/html5/websockets/",
        ],
    }, {
        module => "WebGL",
        imports => [ "DOM", "HTML", "TypedArray" ],
        idls => [
            "https://www.khronos.org/registry/webgl/specs/latest/webgl.idl",
        ],
    }, {
        module => "IndexedDB",
        imports => [ "DOM" ],
        idls => [
            "http://www.w3.org/TR/IndexedDB/",
        ],
    }
);

my $date = strftime("%B%e, %Y", localtime);
my $HEADER = <<"T";
//
// Browser - JS externs for Haxe
// https://github.com/aduros/Browser.hx/blob/master/LICENSE.txt
//
// Generated on $date.
T

# Parse everything first
my @all_idls;
foreach my $spec(@specs) {
    push(@all_idls, @{$spec->{idls}});
}
parse_idls(@all_idls);

# Write out each .hx file
foreach my $spec(@specs) {
    my $module = "$lib.$spec->{module}";
    my $idls = '"' . join('" "', @{$spec->{idls}}) . '"';
    say "Generating $module...";

    my $path = $module;
    $path =~ s/\./\//g;
    $path = "haxe/$path.hx";

    my $dir = substr($path, 0, rindex($path, "/")+1);
    mkpath($dir);

    open my($fh), ">", "$path";
    say $fh $HEADER;

    my $idx = rindex($module, ".");
    if ($idx >= 0) {
        my $package = substr($module, 0, $idx);
        say $fh "package $package;";
        say $fh "";
    }

    # Write the import block
    my @imports = @{$spec->{imports}};
    if (@imports) {
        foreach my $import(@imports) {
            say $fh "import $lib.$import;";
        }
        say $fh "";
    }

    # Write out all the classes that were defined in this spec's IDLs
    generate_haxe($fh, @{$spec->{idls}});
    close $fh;
}

# Finally, run each module through the compiler to validate syntax
foreach my $spec(@specs) {
    my $module = "$lib.$spec->{module}";
    `haxe -js none --no-output -cp haxe $module`;
    if ($? != 0) {
        print "idl2hx generated invalid code!\n";
    }
}
